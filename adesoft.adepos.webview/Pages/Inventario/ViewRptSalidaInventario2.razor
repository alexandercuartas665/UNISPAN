@page "/ViewRptSalidaInventario2"
@using adesoft.adepos.webview.Data
@using adesoft.adepos.webview.Data.Model
@using adesoft.adepos.webview.Util
@using  Newtonsoft.Json
@inject IHttpContextAccessor httpContextAccessor
@inject BiableService biableService
@inject NotificationService notificationService
@inject IJSRuntime JSRuntime

@code {
    DTOFiltersCompras filter;
    public DTOViewRptCompra model { get; set; }
    ConnectionDB connectionDB;
    // int valueTypeReport;
    protected override async Task OnInitializedAsync()
    {
        model = new DTOViewRptCompra();
        //  valueTypeReport = 1;
        //model.Proveedores = await biableService.selectAll(new DTOTercero());
        //model.ListYears = await biableService.SelectAnosMovInventario(2);
        filter = new DTOFiltersCompras();
        connectionDB = httpContextAccessor.HttpContext.Session.Get<ConnectionDB>("ConnectionDB");
        //await JSRuntime.InvokeVoidAsync("$.fn.atachdatepicker");
    }
    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
    async Task BtnGenerateRpt()
    {
        //var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        if (filter.Sedes.Count() == 0 || filter.DateInit == null
           || filter.DateEnd == null)
        {
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "ERROR", Detail = "Todos los filtros son obligatorios.", Duration = 4000 });
            return;
        }

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        //string filterobj = JsonConvert.SerializeObject(filter);
        string guidfilter = Guid.NewGuid().ToString();
        filter.GuidFilter = guidfilter;

        filter.TypeReportId = 8;


        filter.TypeMovementId = 2;
        // filter.AddDynamicField = AddFieldDynam;
        await biableService.AddFilterCompras(filter);
        string sedes = string.Empty;
        foreach (DtoBiableSede se in model.Sedes)
        {
            if (filter.Sedes.Where(x => x == se.CodeSede).Count() > 0)
            {
                sedes += se.Sede + ",";
            }
        }
        sedes = sedes.Substring(0, sedes.Length - 1);


        string bodegas = string.Empty;
        foreach (DtoBiableCO co in model.COs)
        {
            if (filter.COs.Where(x => x == co.Code).Count() > 0)
            {
                bodegas += co.CO + ",";
            }
        }
        bodegas = bodegas.Substring(0, bodegas.Length - 1);


        //byte[] zipfilter = CompressString.Zip(filterobj);
        //string base64 = Convert.ToBase64String(zipfilter);
        // connectionDB = httpContextAccessor.HttpContext.Session.Get<ConnectionDB>("ConnectionDB");
        string paramurl = "RptInventario.aspx?CuentaN=" + connectionDB.CuentaN + "&filterobj=" + guidfilter + "&RptOpt=" + filter.TypeReportId
    + "&Sedes=" + sedes + "&Bodega=" + bodegas;
        await JSRuntime.InvokeVoidAsync("$.fn.LoadReport", paramurl);

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            connectionDB = httpContextAccessor.HttpContext.Session.Get<ConnectionDB>("ConnectionDB");
            ((IList<string>)filter.Sedes).Add("001");

            filter.DateInit = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            filter.DateEnd = filter.DateInit.Value.AddMonths(1).AddDays(-1);
            //((IList<long>)filter.multipleValuesYear).Add(model.ListYears.OrderByDescending(x => x.IdYear).Select(x => x.IdYear).First());
            //model.ListMonths.Select(x => x.IdMonth).ToList().ForEach(t => ((IList<long>)filter.multipleValuesMonth).Add(t));
            ((IList<string>)filter.COs).Add("00101");
            await BtnGenerateRpt();
        }
    }
}

<div class="card" style="color:#102161;font-weight:bold;">
    <div class="card-header">
        CONSUMOS POR ITEM RESUMEN
    </div>
    <div class="card-body">
        @*<div class="form-row">
                <div class="form-group col-md-12">
                    <h3>Tipo de reporte</h3>
                    <RadzenRadioButtonList TValue="int" @bind-Value="@valueTypeReport" Change=@((args) => OnChangeTypeReport(args))>
                        <Items>
                            <RadzenRadioButtonListItem Text="Mensual" Value="1" />
                            <RadzenRadioButtonListItem Text="Por dia" Value="2" />
                        </Items>
                    </RadzenRadioButtonList>
                </div>
            </div>*@
        <div class="form-row">

            <div class="form-group col-md-2">
                <label for="Filter1">Sede</label>
                <RadzenDropDown Name="Filter1" class="form-control" AllowClear="false" Multiple="true" Data="@model.Sedes" @bind-Value="filter.Sedes" TValue="IEnumerable<string>" TextProperty="Sede" ValueProperty="CodeSede" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" />
            </div>
            <div class="form-group col-md-2">
                <label for="Filter2">Bodega</label>
                <RadzenDropDown Name="Filter2" class="form-control" Multiple="true" Data="@model.COs" AllowClear="false" TValue="IEnumerable<string>" @bind-Value="filter.COs" TextProperty="CO" ValueProperty="Code" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" />
            </div>

            @*<div class="form-group col-md-3">
                    <label for="Filter3">Proveedor</label>
                    <RadzenDropDown Name="Filter3" class="form-control" TextProperty="FirstName" ValueProperty="CodeEnterprise" Multiple="true" Data="@model.Proveedores" @bind-Value="filter.Proveedores" AllowClear="false" TValue="IEnumerable<string>" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" />
                </div>*@
            <!--<div class="form-group col-md-1 @(valueTypeReport==1?"":"d-none")">
                <label for="Filter4">Año</label>
                <RadzenDropDown AllowFiltering="true" class="form-control" @bind-Value="filter.multipleValuesYear" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" Data="@model.ListYears" TextProperty="Name" ValueProperty="IdYear" />-->
            @*<RadzenDropDown Name="Filter4" class="form-control" AllowClear="false" TValue="long" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" />*@
            <!--</div>
            <div class="form-group col-md-2 @(valueTypeReport==1?"":"d-none")">
                <label for="Filter4">Meses</label>
                <RadzenDropDown AllowFiltering="true" class="form-control" @bind-Value="filter.multipleValuesMonth" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true" Data="@model.ListMonths" TextProperty="Name" ValueProperty="IdMonth" />
            </div>-->

            <div class="form-group col-md-2">
                <label for="FilterDateinit">Fecha Inicio</label>
                <RadzenDatePicker Name="FilterDateinit" DateFormat="MM/dd/yyyy" @bind-Value="@filter.DateInit" />
            </div>

            <div class="form-group col-md-2">
                <label for="FilterDateend">Fecha Final</label>
                <RadzenDatePicker Name="FilterDateend" DateFormat="MM/dd/yyyy" @bind-Value="@filter.DateEnd" />
            </div>

            <div class="form-group col-md-2">
                <label class="d-block">&nbsp;</label>
                <input class="btn btn-success btn-sm" @onclick="BtnGenerateRpt" value="Generar Reporte" type="button" />
            </div>

        </div>

        <div class="form-row">

            <iframe id="iframeReport" frameborder="0" style="height:450px;width:100%;"></iframe>

        </div>
    </div>
</div>
