@page "/ViewScheduleDispRet/{orderType:int}"
@page "/ViewScheduleDispRet/{strFromDate}/{strToDate}/{orderType:int}"
@using Microsoft.JSInterop;
@using adesoft.adepos.webview.Data
@using adesoft.adepos.webview.Data.Model
@using adesoft.adepos.webview.Data.Model.PL
@using adesoft.adepos.webview.Data.DTO
@using adesoft.adepos.webview.Data.DTO.PL
@using System.Text;
@using System.Net.Mail;
@using System.Net;
@using System.Text.RegularExpressions;
@inject LogisticsService logisticsService;
@inject ParameterService parameterService;
@inject DialogService dialogService;
@inject NotificationService notificationService;
@inject NavigationManager navigationManager;
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject TokenAuthenticationStateProvider autenticationstate;
@inject SecurityService securityService
@inject CompanyService companyService
@code {
    public string searchBy;
    class AmountTotal
    {
        public decimal total { get; set; }
        public string date { get; set; }
    }
    [Parameter]
    public string strFromDate { get; set; }
    [Parameter]
    public string strToDate { get; set; }
    [Parameter]
    public int orderType { get; set; }
    private DTOViewScheduleDispRet scheduleDisRet;
    private List<DTOOrder> orders;
    private List<AmountTotal> amountTotals;
    private Parameter banner;
    private bool exportToExcel = false;
    private bool createOrUpdate = false;
    private bool searchOrder = false;
    private bool sendNotificatioOrder = false;
    private decimal totalTon = 0;
    private int initDay = 0;
    private double days = 0;
    private DateTime fromDate;
    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User.Identity;
        if (!string.IsNullOrEmpty(this.strFromDate) && !string.IsNullOrEmpty(this.strToDate))
            this.scheduleDisRet = new DTOViewScheduleDispRet(DateTime.ParseExact(strFromDate, "dd-MM-yyyy", null), DateTime.ParseExact(strToDate, "dd-MM-yyyy", null));
        else
            this.scheduleDisRet = new DTOViewScheduleDispRet();
        this.scheduleDisRet.ModuleId = orderType;
        this.banner = new Parameter() { Value = "" };
        //this.orders = await logisticsService.GetOrders((OrderType)scheduleDisRet.ModuleId, scheduleDisRet.FromDate, scheduleDisRet.ToDate);
        //this.SearchOrder();
        await this.GetSecurity();
        this.SearchOrder();
    }
    private async Task GetSecurity()
    {
        var companyCurrent = await companyService.SelectCurrent(new Company() { TransOption = 1 });
        string tooken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var listactionapp = await securityService.GetActionsPermission(tooken);
        listactionapp = listactionapp.Where(x => x.HavePermission != false && x.MenuId == 0).ToList();
        ActionApp opt = listactionapp.Where(ac => ac.NameAction.Equals("LogisticsSearchOrder")).FirstOrDefault();
        if (!(opt is null))
        {
            this.searchOrder = opt.IsActive;
        }
        opt = listactionapp.Where(ac => ac.NameAction.Equals("LogisticsCreateOrEditOrder")).FirstOrDefault();
        if (!(opt is null))
        {
            this.createOrUpdate = opt.IsActive;
        }
        opt = listactionapp.Where(ac => ac.NameAction.Equals("LogisticsExportOrder")).FirstOrDefault();
        if (!(opt is null))
        {
            this.exportToExcel = opt.IsActive;
        }
        opt = listactionapp.Where(ac => ac.NameAction.Equals("LogisticsSendNotification")).FirstOrDefault();
        if (!(opt is null))
        {
            this.sendNotificatioOrder = opt.IsActive;
        }



    }
    void EditOrder(long orderId)
    {
        navigationManager.NavigateTo(string.Format("editOrder/{0}/{1}/{2}/{3}/{4}", this.scheduleDisRet.FromDate.ToString("dd-MM-yyyy"), this.scheduleDisRet.ToDate.ToString("dd-MM-yyyy"), this.scheduleDisRet.ModuleId, orderId, (orderId != 0 ? false : true)));
    }
    void ExportToExcel()
    {
        this.days = (this.scheduleDisRet.ToDate - this.scheduleDisRet.FromDate).TotalDays + 1;
        if (this.days > 31)
        {
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Ok", Detail = "El rango de fechas seleccionado supera el maximo de dias permitidos, la cantidad de dias permitida es 31 dias.", Duration = 5000 });
        }
        else
        {
            navigationManager.NavigateTo(string.Format("viewRptLogisticOrders/{0}/{1}/{2}", this.scheduleDisRet.FromDate.ToString("dd-MM-yyyy"), this.scheduleDisRet.ToDate.ToString("dd-MM-yyyy"), this.scheduleDisRet.ModuleId));
        }
    }
    // Propiedad que indica si se quiere seleccionar/deseleccionar todas
    bool SelectAll { get; set; }
    // SELECCION DE TODAS LAS ORDENS
    void ToggleSelectAll(ChangeEventArgs e)
    {
        // Convertimos el valor recibido a booleano.
        bool isChecked = false;
        if (e.Value != null && bool.TryParse(e.Value.ToString(), out isChecked))
        {
            // Si la conversión es exitosa, actualizamos cada orden.
            foreach (var order in orders)
            {
                order.IsSelected = isChecked;
            }
        }
    }
    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
    async void SearchOrder()
    {
        dialogService.Close();
        dialogService.Open<DialogProgressBar>(null, new Dictionary<string, object>() { { "Tittle", "Procesando" } }, new DialogOptions() { ShowTitle = false, Width = "300px", Height = "20px", Left = "calc(50% - 150px)", Top = "calc(50% - 200px)" });
        Task.Run(async () =>
        {
            this.initDay = this.scheduleDisRet.FromDate.Day;
            this.totalTon = 0;
            this.days = (this.scheduleDisRet.ToDate - this.scheduleDisRet.FromDate).TotalDays + 1;
            this.fromDate = this.scheduleDisRet.FromDate;
            amountTotals = new List<AmountTotal>();
            this.banner = await parameterService.SelectByIdentify(this.scheduleDisRet.ModuleId == 1 ? "LogisticsBannerDispatchs" : "LogisticsBannerReturns");
            try
            {
                this.orders = await logisticsService.GetOrders((OrderType)scheduleDisRet.ModuleId, scheduleDisRet.FromDate, scheduleDisRet.ToDate, searchBy);
                foreach (var order in this.orders)
                {
                    this.totalTon += order.Wight;
                    AmountTotal amountTotal = null;
                    string date = "";
                    if (this.scheduleDisRet.ModuleId == 1)
                    {
                        date = order.DispatchDateTime.Value.ToString("dd/MM/yyyy");
                        amountTotal = amountTotals.Where(t => t.date.Equals(date)).FirstOrDefault();
                    }
                    else
                    {
                        date = order.ReturnDateTime.Value.ToString("dd/MM/yyyy");
                        amountTotal = amountTotals.Where(t => t.date.Equals(date)).FirstOrDefault();
                    }
                    if (amountTotal is null)
                    {
                        this.amountTotals.Add(new AmountTotal()
                        {
                            date = date,
                            total = order.Wight
                        });
                    }
                    else
                    {
                        amountTotal.total += order.Wight;
                    }
                }
            }
            catch (Exception ex)
            {
                dialogService.Close();
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Ok", Detail = ex.Message, Duration = 5000 });
                throw;
            }
            this.InvokeAsync(() =>
            {
                dialogService.Close();
                StateHasChanged();
            });
        });
    }
    async void keySearchBy(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            this.SearchOrder();
        }
    }
    #region  enviar notificacion de correo
    void SendNotification()
    {
        if (this.sendNotificatioOrder == false)
        {
            notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "ok",
                Detail = $"No tienes permisos suficientes para enviar notificaciones.",
                Duration = 3000
            });
            //DESMARCA TODAS LAS ORDENES
            foreach (var order in orders)
            {
                order.IsSelected = false;
            }
        }
        else

        {

            // Cargar la configuración
            IConfiguration configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory()) // Ruta base del proyecto
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true) // Archivo de configuración
                .Build();
            string ruta_anexo_despachos = configuration.GetValue<string>("AdjuntoDespacho");
            string ruta_anexo_devoluciones = configuration.GetValue<string>("AdjuntoDevolucion");
            StringBuilder reportContent = new StringBuilder();
            string ListaOrdenes = "";
            string ListaCorreos = "";
            var selectedOrders = orders.Where(o => o.IsSelected).ToList();
            //var ordersByClient = selectedOrders.GroupBy(o => o.Works);
            var ordersByClient = selectedOrders.GroupBy(o => o.IsSelected);
            var llevaDespachos = 0;
            var llevaDevoluciones = 0;
            //TIPO DE ORDENES A ENVIAR CORREO
            var tipo_orden_correos = "";
            var ListaOrdenesDespachos = "";

            // Obtener todos los archivos PDF en el directorio
            string[] archivosDespachos = Array.Empty<string>();
            if (!string.IsNullOrEmpty(ruta_anexo_despachos) && Directory.Exists(ruta_anexo_despachos))
            {
                archivosDespachos = Directory.GetFiles(ruta_anexo_despachos, "*.pdf");
            }
            string[] archivosDevoluciones = Array.Empty<string>();
            if (!string.IsNullOrEmpty(ruta_anexo_devoluciones) && Directory.Exists(ruta_anexo_devoluciones))
            {
                archivosDevoluciones = Directory.GetFiles(ruta_anexo_devoluciones, "*.pdf");
            }
            foreach (var clientGroup in ordersByClient)
            {
                reportContent.Clear();
                ListaOrdenes = "";
                ListaCorreos = "";
                ListaOrdenesDespachos = "";
                var clientName = clientGroup.Key;
                var ordersForClient = clientGroup.ToList();
                List<Tuple<string, string>> attachmentFiles = new List<Tuple<string, string>>();
                foreach (var order in ordersForClient)
                {
                    tipo_orden_correos = order.OrderType.ToString();
                    if (order.OrderType.ToString() == "Dispatch")
                    {
                        reportContent.AppendLine($"<br/>{GenerateOrderReportDESPACHO(order)}"); // o iterar si son múltiples
                    }
                    else if (order.OrderType.ToString() == "Return")
                    {
                        reportContent.AppendLine($"<br/>{GenerateOrderReportDEVOLUCION(order)}"); // o iterar si son múltiples
                    }
                    ListaOrdenes += "," + order.OrderId;
                    ListaCorreos += ";" + order.Email;
                    ListaCorreos += ";" + ListaCorreosEspeciales(order);

                    if (ListaOrdenesDespachos == "")
                    {
                        ListaOrdenesDespachos = order.OrderNum;
                    }
                    else
                    {
                        ListaOrdenesDespachos += ", " + order.OrderNum;
                    }

                    if (order.OrderType.ToString() == "Dispatch")
                    {
                        llevaDespachos++;
                    }
                    else if (order.OrderType.ToString() == "Return")
                    {
                        llevaDevoluciones++;
                    }
                    Console.WriteLine($" - Orden ID: {order.OrderId}");
                    //PREPARA UN LISTADO DE TODOS LOS ARCHIVOS QUE SE DEBEN INCLUIR TENIENDO EN CUENTA CADA ORDEN
                    var orderFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Uploads", "OrderAttachments", order.OrderId.ToString());
                    if (Directory.Exists(orderFolder))
                    {
                        foreach (var filePath in Directory.GetFiles(orderFolder))
                        {
                            string fileNameReal = Path.GetFileName(filePath);
                            string fileNameEspecial = order.OPNum + "_" + fileNameReal; // Puedes personalizar esto
                            attachmentFiles.Add(new Tuple<string, string>(filePath, fileNameEspecial));
                        }
                    }
                }
                var textocorreo = TextoParaCorreo(reportContent.ToString(), tipo_orden_correos, ListaOrdenesDespachos); // o iterar si son múltiples
                try
                {
                    Task.Run(() =>
                    {
                        SmtpClient client = new SmtpClient("smtp.office365.com", 587);
                        client.UseDefaultCredentials = false;
                        client.EnableSsl = true;
                        client.Credentials = new NetworkCredential("formularios@unispan.com.co", "Sistemas2024*");
                        MailMessage mailMessage = new MailMessage();
                        mailMessage.From = new MailAddress("formularios@unispan.com.co");
                        mailMessage.To.Add("sistemas@unispan.com.co");
                        //mailMessage.To.Add("acuartas@bitcode.com.co");
                        if (tipo_orden_correos == "Dispatch")
                        {
                            mailMessage.To.Add("info_despacho@unispan.com.co");
                        }
                        else if (tipo_orden_correos == "Return")
                        {
                            mailMessage.To.Add("diroperaciones@unispan.com.co");
                        }
                        //mailMessage.To.Add("acuartas@bitcode.com.co");
                        //AGREGA LOS CORREOS DE LOS CLIENTES QUE ESTAN EN LA VARIABLE ListaCorreos

                        ListaCorreos = ListaCorreos.Replace("\n", "")
                                    .Replace("\r", "")
                                    .Replace("\t", "");
                        ListaCorreos = ListaCorreos.Replace("\u200B", "");  // Forma más segura
                        ListaCorreos = ListaCorreos.Replace(" ", "");  // Forma más segura

                        if (!string.IsNullOrEmpty(ListaCorreos))
                        {
                            var correos = ListaCorreos.Split(';').Where(c => !string.IsNullOrEmpty(c)).ToList();
                            foreach (var correo in correos)
                            {
                                if (EsCorreoValido(correo))
                                {
                                    mailMessage.To.Add(correo);
                                }
                            }
                        }
                        ;
                        mailMessage.IsBodyHtml = true;
                        mailMessage.BodyEncoding = Encoding.UTF8;
                        //mailMessage.Body = $" {reportContent}  ";
                        mailMessage.Body = $" {textocorreo}  ";
                        if (tipo_orden_correos == "Dispatch")
                        {
                            mailMessage.Subject = $"ACTUALIZACIÓN PROGRAMACIÓN DESPACHO {ListaOrdenesDespachos}";
                        }
                        else if (tipo_orden_correos == "Return")
                        {
                            mailMessage.Subject = $"ACTUALIZACIÓN PROGRAMACIÓN DEVOLUCIÓN {ListaOrdenes}";

                        }
                        // Adjuntar cada PDF al correo
                        if (llevaDespachos != 0)
                        {
                            foreach (string archivo in archivosDespachos)
                            {
                                Attachment adjunto = new Attachment(archivo);
                                mailMessage.Attachments.Add(adjunto);
                            }
                        }
                        if (llevaDevoluciones != 0)
                        {
                            foreach (string archivo in archivosDevoluciones)
                            {
                                Attachment adjunto = new Attachment(archivo);
                                mailMessage.Attachments.Add(adjunto);
                            }
                        }
                        // adjunta los archivos PDF almanecados en la carpeta de cada orden
                        foreach (var item in attachmentFiles)
                        {
                            Attachment adjunto = new Attachment(item.Item1);
                            adjunto.ContentDisposition.FileName = item.Item2;
                            mailMessage.Attachments.Add(adjunto);
                        }
                        client.Send(mailMessage);
                    });
                }
                catch (Exception ex)
                {

                    //MUESTRA UN MENSAJE INDICANDO PROCESO TERMINDO
                    notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "ERROR",
                        Detail = ex.Message,
                        Duration = 3000
                    });


                }
            }
            //MUESTRA UN MENSAJE INDICANDO PROCESO TERMINDO
            notificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "OK",
                Detail = $"Correos de notificacion enviados.",
                Duration = 3000
            });
            //DESMARCA TODAS LAS ORDENES
            foreach (var order in orders)
            {
                order.IsSelected = false;
            }
        }
    }

    public static bool EsCorreoValido(string correo)
    {
        if (string.IsNullOrWhiteSpace(correo))
            return false;

        try
        {
            // Patrón de validación mejorado
            string patron = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
            return Regex.IsMatch(correo.Trim(), patron, RegexOptions.IgnoreCase);
        }
        catch (RegexMatchTimeoutException)
        {
            return false;
        }
    }




    #endregion
    #region Preparar correos
    public string GenerateOrderReportDEVOLUCION(DTOOrder order)
    {
        var sb = new StringBuilder();
        // ESTILOS CSS
        string tableStyle = "border-collapse: collapse; font-family: Arial, sans-serif; width: auto; white-space: nowrap;";
        string headerStyle = "background-color: #002060; color: white; padding: 12px; text-align: left; position: sticky; left: 0;";
        string cellStyle = "padding: 12px; border: 1px solid #ddd; vertical-align: top;";
        // TABLA CON MÚLTIPLES COLUMNAS
        sb.AppendLine($"<div style='overflow-x: auto;'>");
        sb.AppendLine($"<table style='{tableStyle}'>");
        // ENCABEZADOS
        // Fila combinada para "CONTROL DE DESPACHOS" y "LUNES"
        sb.Append("<tr>");
        // Celda combinada para las primeras 8 columnas
        AddTableHeaderWithColspan(sb, headerStyle + "border: 1px solid white;", "CONTROL DE DEVOLUCIONES", 5);
        // Celda combinada para las siguientes 4 columnas
        AddTableHeaderWithColspan(sb, headerStyle + "border: 1px solid white;", $"{order.ReturnDateTime.Value:dddd}".ToUpper() + "<br>" + $"{order.ReturnDateTime.Value:dd/MM/yyyy}", 4);
        sb.AppendLine("</tr>");
        sb.AppendLine("<tr>");
        AddTableHeader(sb, headerStyle, "OBRAS");
        AddTableHeader(sb, headerStyle, "CLIENTE");
        AddTableHeader(sb, headerStyle, "CIUDAD");
        AddTableHeader(sb, headerStyle, "COMERCIAL");
        AddTableHeader(sb, headerStyle, "TRANSPORTE A CARGO DE");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "PESO (ton)");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "HORA DE CARGUE");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "OK");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "VEHÍCULO");
        sb.AppendLine("</tr>");
        // FILA DE DATOS
        sb.AppendLine("<tr>");
        AddTableCell(sb, cellStyle, order.Works);
        AddTableCell(sb, cellStyle, $"{order.CustomerName} ({order.CustomerAccount})");
        AddTableCell(sb, cellStyle, order.City);
        AddTableCell(sb, cellStyle, $"{order.SalesPerson}");
        AddTableCell(sb, cellStyle, order.ReponsableTrans);
        //INFORMACION DESPACHO
        AddTableCell(sb, cellStyle, $"{order.Wight} kg");
        AddTableCell(sb, cellStyle, @order.ReturnDateTime.Value.ToString("HH:mm"));
        AddTableCell(sb, cellStyle, order.Ok ? "OK" : "NO");
        AddTableCell(sb, cellStyle, $"{order.VehicleType}");
        sb.AppendLine("</tr>");
        sb.AppendLine("</table>");
        sb.AppendLine("</div>");
        return sb.ToString();
    }
    public string GenerateOrderReportDESPACHO(DTOOrder order)
    {
        var sb = new StringBuilder();
        // ESTILOS CSS
        string tableStyle = "border-collapse: collapse; font-family: Arial, sans-serif; width: auto; white-space: nowrap;";
        string headerStyle = "background-color: #002060; color: white; padding: 12px; text-align: left; position: sticky; left: 0;";
        string cellStyle = "padding: 12px; border: 1px solid #ddd; vertical-align: top;";
        // TABLA CON MÚLTIPLES COLUMNAS
        sb.AppendLine($"<div style='overflow-x: auto;'>");
        sb.AppendLine($"<table style='{tableStyle}'>");
        // ENCABEZADOS
        // Fila combinada para "CONTROL DE DESPACHOS" y "LUNES"
        sb.Append("<tr>");
        // Celda combinada para las primeras 8 columnas
        AddTableHeaderWithColspan(sb, headerStyle + "border: 1px solid white;", "CONTROL DE DESPACHOS", 8);
        // Celda combinada para las siguientes 4 columnas
        AddTableHeaderWithColspan(sb, headerStyle + "border: 1px solid white;", $"{order.DispatchDateTime.Value:dddd}".ToUpper() + "<br>" + $"{order.DispatchDateTime.Value:dd/MM/yyyy}", 4);
        sb.AppendLine("</tr>");
        sb.AppendLine("<tr>");
        AddTableHeader(sb, headerStyle, "OBRAS");
        AddTableHeader(sb, headerStyle, "CLIENTE");
        AddTableHeader(sb, headerStyle, "ORDER DE DESPACHO");
        AddTableHeader(sb, headerStyle, "#OP");
        AddTableHeader(sb, headerStyle, "COMERCIAL");
        AddTableHeader(sb, headerStyle, "MÓDULO");
        AddTableHeader(sb, headerStyle, "CIUDAD");
        AddTableHeader(sb, headerStyle, "TRANSPORTE A CARGO DE");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "PESO (ton)");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "HORA DE CARGUE");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "OK");
        AddTableHeader(sb, headerStyle + "border: 1px solid white; width: 1%; white-space: nowrap;", "VEHÍCULO");
        sb.AppendLine("</tr>");
        // FILA DE DATOS
        sb.AppendLine("<tr>");
        AddTableCell(sb, cellStyle, order.Works);
        AddTableCell(sb, cellStyle, $"{order.CustomerName} ({order.CustomerAccount})");
        AddTableCell(sb, cellStyle, order.OrderNum);
        AddTableCell(sb, cellStyle, order.OPNum);
        AddTableCell(sb, cellStyle, $"{order.SalesPerson}");
        AddTableCell(sb, cellStyle, order.Module);
        AddTableCell(sb, cellStyle, order.City);
        AddTableCell(sb, cellStyle, order.ReponsableTrans);
        //INFORMACION DESPACHO
        AddTableCell(sb, cellStyle, $"{order.Wight} kg");
        AddTableCell(sb, cellStyle, @order.DispatchDateTime.Value.ToString("HH:mm"));
        AddTableCell(sb, cellStyle, order.Ok ? "OK" : "NO");
        AddTableCell(sb, cellStyle, $"{order.VehicleType}");
        sb.AppendLine("</tr>");
        sb.AppendLine("</table>");
        sb.AppendLine("</div>");
        return sb.ToString();
    }
    private void AddTableHeader(StringBuilder sb, string style, string header)
    {
        sb.AppendLine($"<th style='{style}'>{header}</th>");
    }
    private void AddTableCell(StringBuilder sb, string style, string value)
    {
        sb.AppendLine($"<td style='{style}'>{value}</td>");
    }
    private void AddTableHeaderWithColspan(StringBuilder sb, string style, string text, int colspan)
    {
        sb.AppendFormat("<th style='{0}; text-align: center;' colspan='{1}'>{2}</th>", style, colspan, text);
    }
    #region Texto base correo
    public string TextoParaCorreo(string Tablas, string tipo_orden_correos, string ListaOrdenes)
    {
        var sb = new StringBuilder();
        var plantilla_correo = "";
        var texto_en_archivo = "";
        if (tipo_orden_correos == "Dispatch")
        {
            plantilla_correo = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Uploads", "TextMail", "despacho.txt");
        }
        else if (tipo_orden_correos == "Return")
        {
            plantilla_correo = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Uploads", "TextMail", "devolucion.txt");
        }
        // Verificar si el archivo existe y leer su contenido
        if (File.Exists(plantilla_correo))
        {
            texto_en_archivo = File.ReadAllText(plantilla_correo, Encoding.UTF8); // Lee el contenido con codificación
        }
        else
        {
            // Manejar el caso de archivo no encontrado (opcional)
            texto_en_archivo = "Plantilla no disponible";
        }
        texto_en_archivo = texto_en_archivo.Replace("@@TABLA@@", Tablas);
        texto_en_archivo = texto_en_archivo.Replace("@@ORDENES@@", ListaOrdenes);
        sb.Append(texto_en_archivo);
        return sb.ToString();
    }
    #endregion
    #endregion


    #region grupos de correo especiales
    public string ListaCorreosEspeciales(DTOOrder order)
    {
        var ListaCorreosRetorno = "";
        switch (order.Module)
        {
            case "YINNA H.":
                ListaCorreosRetorno += ";auxingenieria4@unispan.com.co";
                break;
            case "LUZ H.":
                ListaCorreosRetorno += ";luzcuellar@unispan.com.co";
                break;
            case "GIOVANNY":
                ListaCorreosRetorno += ";auxingenieria3@unispan.com.co";
                break;
            case "VLADIMIR M.":
                ListaCorreosRetorno += ";vladimirmarin@unispan.com.co";
                break;
            case "CARLOS D.":
                ListaCorreosRetorno += ";carlosdagua@unispan.com.co";
                break;
            case "MARIA PILAR":
                ListaCorreosRetorno += ";asistentecomercial@unispan.com.co";
                break;
            case "CARLOS M. E.":
                ListaCorreosRetorno += ";auxingenieria2@unispan.com.co";
                break;
            case "LUIS A. C.":
                ListaCorreosRetorno += ";cooringenieria2@unispan.com.co";
                break;
            case "SERGIO A. G.":
                ListaCorreosRetorno += ";auxingenieria5@unispan.com.co";
                break;
            case "MAIRA OSSA":
                ListaCorreosRetorno += ";auxingenieria1@unispan.com.co";
                break;
            case "MAICOL MUÑOZ":
                ListaCorreosRetorno += ";auxingenieria8@unispan.com.co";
                break;
            case "EDWIN GUERRERO":
                ListaCorreosRetorno += ";auxingenieria9@unispan.com.co";
                break;
            case "LINA FERNANDA GIRALDO":
                ListaCorreosRetorno += ";auxingenieria6@unispan.com.co";
                break;
            case "YEAN CARLOS IMBACHI":
                ListaCorreosRetorno += ";proyectista14@unispan.com.co";
                break;
            case "SAMANDA R":
                ListaCorreosRetorno += ";samandarosas@unispan.com.co";
                break;
            case "MICHAEL O.":
                ListaCorreosRetorno += ";michaelorjuela@unispan.com.co";
                break;
            case "MIGUEL S":
                ListaCorreosRetorno += ";miguelsaavedra@unispan.com.co";
                break;
            case "LINDA P":
                ListaCorreosRetorno += ";lindapatino@unispan.com.co";
                break;
            case "ANGELA D":
                ListaCorreosRetorno += ";angeladominguez@unispan.com.co";
                break;
            case "JUAN C R":
                ListaCorreosRetorno += ";juanrestrepo@unispan.com.co";
                break;
            case "CRISTIAN C":
                ListaCorreosRetorno += ";cristiancubillos@unispan.com.co";
                break;
            case "TEYLOR D":
                ListaCorreosRetorno += ";teylordevia@unispan.com.co";
                break;
            case "LUIS O G":
                ListaCorreosRetorno += ";luisgarcia@unispan.com.co";
                break;
            case "YEFFERSON R":
                ListaCorreosRetorno += ";jeffersonruiz@unispan.com.co";
                break;
            case "NOHEMY DIAZ":
                ListaCorreosRetorno += ";Proyectista16@unispan.com.co";
                break;
            case "BRANDON M.":
                ListaCorreosRetorno += ";proyectista13@unispan.com.co";
                break;
            case "ANDRES F. CORREA":
                ListaCorreosRetorno += ";proyectista15@unispan.com.co";
                break;


        }


        switch (order.SalesPerson)
        {
            case "ANGELA D.":
                ListaCorreosRetorno += ";angeladominguez@unispan.com.co; asesorescali@unispan.com.co";
                break;
            case "YONAIRO P.":
                ListaCorreosRetorno += ";yonairopaez@unispan.com.co; asesorescentro@unispan.com.co";
                break;
            case "LUIS O.":
                ListaCorreosRetorno += ";luisgarcia@unispan.com.co; sergioperez@unispan.com.co";
                break;
            case "SAMANDA R.":
                ListaCorreosRetorno += ";samandarosas@unispan.com.co; asesorescentro@unispan.com.co";
                break;
            case "JUAN C. R.":
                ListaCorreosRetorno += ";juanrestrepo@unispan.com.co; asesorescosta@unispan.com.co";
                break;
            case "MIGUEL  S.":
                ListaCorreosRetorno += ";miguelsaavedra@unispan.com.co; asesorescali@unispan.com.co";
                break;
            case "CRISTIAN C.":
                ListaCorreosRetorno += ";cristiancubillos@unispan.com.co; asesorescentro@unispan.com.co";
                break;
            case "LINDA PATIÑO":
                ListaCorreosRetorno += ";lindapatino@unispan.com.co; asesorescali@unispan.com.co";
                break;
            case "JEFFERSON RUIZ":
                ListaCorreosRetorno += ";jeffersonruiz@unispan.com.co; sergioperez@unispan.com.co";
                break;
            case "TEYLOR DEVIA":
                ListaCorreosRetorno += ";teylordevia@unispan.com.co; asesorescentro@unispan.com.co";
                break;
            case "MICHAEL ORJUELA":
                ListaCorreosRetorno += ";michaelorjuela@unispan.com.co; asesorescentro@unispan.com.co";
                break;
            case "JOSE MEJÍA":
                ListaCorreosRetorno += ";josemejia@unispan.com.co";
                break;


        }


        return ListaCorreosRetorno;
    }
    #endregion
}
<div class="row">
    <div class="col-sm-5">
        <div class="row">
            <div class="col-sm-12">
                @{
                    if (this.createOrUpdate)
                    {
                        <button type="button" @onclick="@(args => { EditOrder(0); })" class="btn btn-primary">Nueva orden</button>
                    }
                    if (this.exportToExcel)
                    {
                        <button type="button" @onclick="@(args => { ExportToExcel(); })" class="btn btn-success">Exportar a excel</button>
                    }
                    <button type="button" @onclick="@(args => { SendNotification(); })" class="btn btn-success">Notificar</button>
                }
            </div>
            <div class="col-sm-12">
                <div class="row pt-2">
                    <div class="form-group col-sm-4">
                        <label>Modulo</label>
                        <RadzenDropDown class="form-control" @bind-Value="scheduleDisRet.ModuleId" Change="@SearchOrder" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="false" Data="@scheduleDisRet.Modules" TextProperty="Description" ValueProperty="Id" />
                    </div>
                    <div class="form-group col-sm-4">
                        <label>Desde</label>
                        <RadzenDatePicker Name="ToDate" DateFormat="MM/dd/yyyy" @bind-Value="@scheduleDisRet.FromDate" class="d-block" />
                    </div>
                    <div class="form-group col-sm-4">
                        <label>Hasta</label>
                        <RadzenDatePicker Name="ToDate" DateFormat="MM/dd/yyyy" @bind-Value="@scheduleDisRet.ToDate" class="d-block" />
                    </div>
                </div>
                <div class="row pt-1">
                    <div class="form-group col-sm-12">
                        <div class="input-group input-group-lg">
                            <input type="text" @bind-value="searchBy" class="form-control" placeholder="Filtrar ordenes" @onkeyup="@(args => { keySearchBy(args); })">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" id="button-addon1" @onclick="@(args => { SearchOrder(); })">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-7">
        <div class="banner">
            <img src="@this.banner.Value" />
        </div>
    </div>
</div>

<div class="order-table-scroll fixed-content-grid ">
    <div class="order-table-wrap">
        @{
            if (this.scheduleDisRet.ModuleId == 1)
            {
                <table>
                    <thead>
                        <tr class="thead-title-bold row-fixed-1">
                            <th colspan="8" class="col-title-totalTon"><span>SUMA TONELADAS PROGRAMADAS ---></span></th>
                            <th class="col-totalTon">@(string.Format("{0}Ton", this.totalTon.ToString("0.00")))</th>
                            @{
                                for (int i = 0; i < days; i++)
                                {
                                    <th colspan="4" class="col-totalTonXDay">
                                        @{
                                            var totalAmount = amountTotals.Where(t => t.date.Equals(fromDate.AddDays(i).ToString("dd/MM/yyyy"))).FirstOrDefault();
                                            if (!(totalAmount is null))
                                            {
                                                <span>@(string.Format("{0}Ton", totalAmount.total.ToString("0.00")))</span>
                                            }
                                            else
                                            {
                                                <span>@(string.Format("0.00Ton"))</span>
                                            }
                                        }
                                    </th>
                                }
                            }
                            <th colspan="2" style="background-color: white;"></th>
                        </tr>
                        @*<tr>
                                <th colspan="8" class="col-banner">
                                    <img src="@this.banner.Value" />
                                </th>
                            </tr>*@
                        <tr class="thead-title-bold row-fixed-2">
                            <th colspan="9" class="col-title">@(this.scheduleDisRet.ModuleId == 1 ? "CONTROL DE DESPACHOS" : "CONTROL DE DEVOLUCIONES")</th>
                            @{
                                for (int i = 0; i < days; i++)
                                {
                                    <th colspan="4">
                                        @{
                                            <span>@fromDate.AddDays(i).ToString("dddd").ToUpper()</span>
                                            <br />
                                            <span>@fromDate.AddDays(i).ToString("d-MMMM-yyyy").ToUpper()</span>
                                        }
                                    </th>
                                }
                            }
                            <th colspan="2" style="background-color: #9BBB59; color: black;">DESPACHOS PENDIENTES POR DEFINIR FECHA</th>
                        </tr>
                        <tr class="thead-title-nobold row-fixed-3">
                            <!-- Columna para el checkbox "Seleccionar Todo" -->
                            <th class="col-checkbox">
                                <input type="checkbox" id="selectAll" @onchange="ToggleSelectAll" />
                            </th>
                            <th class="col-work">OBRAS</th>
                            <th class="col-customerName">CLIENTE</th>
                            <th class="col-orderId"><span>ORDEN DE</span><br /><span>DESPACHO</span></th>
                            <th class="col-opNum"># OP</th>
                            <th class="col-salesPerson">COMERCIAL</th>
                            <th class="col-module">MODULÓ</th>
                            <th class="col-city">CIUDAD</th>
                            <th class="col-transport"><span>TRANSPORTE A</span><br /><span>CARGO DE</span></th>
                            @{
                                for (int i = 0; i < days; i++)
                                {
                                    <th class="col-wight"><span>PESO</span><br /><span>(Ton)</span></th>
                                    <th class="col-time"><span>Hora de</span><br /><span>cargue</span></th>
                                    <th>OK</th>
                                    <th>VEHICULO</th>
                                }
                            }
                            <th class="col-wight2"><span>PESO</span><br /><span>(Ton)</span></th>
                            <th>OBSERVACIONES</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (!(orders is null))
                            {
                                foreach (var order in orders)
                                {
                                    <tr>
                                        <!-- Columna para checkbox individual -->
                                        <td class="col-checkbox">
                                            <input type="checkbox" name="selectedOrders" @bind="order.IsSelected" />
                                        </td>
                                        @{
                                            if (order.Status.Equals(OrderStatus.Paused))
                                            {
                                                if (order.DispatchDateTime.Value.ToString("yyyy").Equals("0001"))
                                                {
                                                    <td class="col-work" style="background: red; color: white; padding: 0px !important;">
                                                        <div style="border: 4px solid #ffc107; display: inline-block; width: 100%; height: 28px">
                                                            <span style="display: inline-block; margin: 2px 5px;">@order.Works</span>
                                                        </div>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td class="col-work" style="background: #ffc107; color: black">@order.Works</td>
                                                }
                                            }
                                            else
                                            {
                                                if (order.DispatchDateTime.Value.ToString("yyyy").Equals("0001"))
                                                {
                                                    <td class="col-work" style="background: red; color: white">@order.Works</td>
                                                }
                                                else
                                                {
                                                    <td class="col-work">@order.Works</td>
                                                }
                                            }
                                        }
                                        <td class="col-customerName">@order.CustomerName</td>
                                        <td class="col-orderId">
                                            @{
                                                if (this.searchOrder || this.createOrUpdate)
                                                {
                                                    <a href="" @onclick="@(args => { this.EditOrder(order.OrderId); })">
                                                        @{
                                                            if (order.DispatchParent)
                                                            {
                                                                <span style="color: red; font-weight:bold; font-size: 12px">*</span>
                                                            }
                                                            if (!string.IsNullOrEmpty(order.OrderNum))
                                                            {
                                                                var orderNumList = order.OrderNum.Split(',');
                                                                foreach (var orderNum in orderNumList)
                                                                {
                                                                    <span>@orderNum</span>
                                                                    <br />
                                                                }
                                                            }
                                                        }
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span>@order.OrderNum</span>
                                                }
                                            }
                                        </td>
                                        <td class="col-opNum">@order.OPNum</td>
                                        <td class="col-salesPerson">@order.SalesPerson</td>
                                        <td class="col-module">@order.Module</td>
                                        <td class="col-city">@order.City</td>
                                        <td class="col-transport">@order.ReponsableTrans</td>
                                        @{
                                            fromDate = this.scheduleDisRet.FromDate;
                                            for (int i = 0; i < days; i++)
                                            {
                                                var curDate = fromDate.AddDays(i);
                                                if (order.DispatchDateTime.Value.ToString("dd-MM-yyyy").Equals(curDate.ToString("dd-MM-yyyy")))
                                                {
                                                    if (order.DispatchParent || (order.OrderId != order.DispatchId))
                                                    {
                                                        <td style="background: yellow;">@order.Wight</td>
                                                    }
                                                    else
                                                    {
                                                        <td>@order.Wight</td>
                                                    }
                                                    <td><span>@order.DispatchDateTime.Value.ToString("HH:mm")</span></td>
                                                    <td>
                                                        @{
                                                            if (order.Ok)
                                                            {
                                                                <span>OK</span>
                                                            }
                                                        }
                                                    </td>
                                                    <td>@order.VehicleType</td>
                                                }
                                                else
                                                {
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                }
                                            }
                                            if (order.DispatchDateTime.Equals(DateTime.MinValue))
                                            {
                                                <td>@order.Wight</td>
                                                <td>@order.Comment</td>
                                            }
                                            else
                                            {
                                                <td></td>
                                                <td></td>
                                            }
                                        }
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <table>
                    <thead>
                        <tr class="thead-title-bold row-fixed-1">
                            <th colspan="5" class="col-ret-title-totalTon"><span>SUMA TONELADAS PROGRAMADAS ---></span></th>
                            <th class="col-ret-totalTon">@(string.Format("{0}Ton", this.totalTon.ToString("0.00")))</th>
                            @{
                                for (int i = 0; i < days; i++)
                                {
                                    <th colspan="3" class="col-totalTonXDay">
                                        @{
                                            var totalAmount = amountTotals.Where(t => t.date.Equals(fromDate.AddDays(i).ToString("dd/MM/yyyy"))).FirstOrDefault();
                                            if (!(totalAmount is null))
                                            {
                                                <span>@(string.Format("{0}Ton", totalAmount.total.ToString("0.00")))</span>
                                            }
                                            else
                                            {
                                                <span>@(string.Format("0.00Ton"))</span>
                                            }
                                        }
                                    </th>
                                }
                            }
                        </tr>
                        <tr class="thead-title-bold row-fixed-2">
                            <th colspan="6" class="col-ret-title">@(this.scheduleDisRet.ModuleId == 1 ? "CONTROL DE DESPACHOS" : "CONTROL DE DEVOLUCIONES")</th>
                            @{
                                for (int i = 0; i < days; i++)
                                {
                                    <th colspan="3">
                                        @{
                                            <span>@fromDate.AddDays(i).ToString("dddd").ToUpper()</span>
                                            <br />
                                            <span>@fromDate.AddDays(i).ToString("d-MMMM-yyyy").ToUpper()</span>
                                        }
                                    </th>
                                }
                            }
                        </tr>
                        <tr class="thead-title-nobold row-fixed-3">
                            <th class="col-checkbox">
                                <input type="checkbox" id="selectAll" @onchange="ToggleSelectAll" />
                            </th>
                            <th class="col-ret-work">OBRAS</th>
                            <th class="col-ret-customerName">CLIENTE</th>
                            <th class="col-ret-city">CIUDAD</th>
                            <th class="col-ret-salesPerson">COMERCIAL</th>
                            <th class="col-transportdev"><span>TRANSPORTE A</span><br /><span>CARGO DE</span></th>
                            @{
                                for (int i = 0; i < days; i++)
                                {
                                    <th class="col-wight"><span>PESO</span><br /><span>(Ton)</span></th>
                                    <th class="col-time"><span>Hora de</span><br /><span>cargue</span></th>
                                    <th>OK</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (!(orders is null))
                            {
                                foreach (var order in orders)
                                {
                                    <tr>
                                        <td class="col-checkbox">
                                            <input type="checkbox" name="selectedOrders" @bind="order.IsSelected" />
                                        </td>
                                        <td class="col-ret-work">
                                            @{
                                                if (this.searchOrder || this.createOrUpdate)
                                                {
                                                    <a href="" @onclick="@(args => { this.EditOrder(order.OrderId); })">@order.Works</a>
                                                }
                                                else
                                                {
                                                    <span>@order.Works</span>
                                                }
                                            }
                                        </td>
                                        @*<td class="col-ret-orderId">@order.OrderNum</td>*@
                                        <td class="col-ret-customerName">@order.CustomerName</td>
                                        <td class="col-ret-city">@order.City</td>
                                        <td class="col-ret-salesPerson">@order.SalesPerson</td>
                                        <td class="col-transportdev">@order.ReponsableTrans</td>
                                        @{
                                            fromDate = this.scheduleDisRet.FromDate;
                                            for (int i = 0; i < days; i++)
                                            {
                                                var curDate = fromDate.AddDays(i);
                                                if (order.ReturnDateTime.Value.ToString("dd-MM-yyyy").Equals(curDate.ToString("dd-MM-yyyy")))
                                                {
                                                    <td>@order.Wight</td>
                                                    <td><span>@order.ReturnDateTime.Value.ToString("HH:mm")</span></td>
                                                    <td>
                                                        @{
                                                            if (order.Ok)
                                                            {
                                                                <span>OK</span>
                                                            }
                                                        }
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                }
                                            }
                                        }
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            }
        }
    </div>
</div>

@* === FIN TABLA FIJA === *@
<div class="form-row">
    <iframe id="iframeReport" frameborder="0" style="height:700px;width:100%;"></iframe>
</div>