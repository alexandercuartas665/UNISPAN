@page "/ViewRptTransportOrders/{strFromDate}/{strToDate}/{orderType:int}/{filterId:int}"
@page "/ViewRptTransportOrders/{subModule}/{reportFilterId}"
@using adesoft.adepos.webview.Data.DTO
@using  Newtonsoft.Json
@inject IHttpContextAccessor httpContextAccessor
@inject NotificationService notificationService
@inject LogisticsService logisticsService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager;
@inject Data.Interfaces.ILogisticsCoreService logisticsCoreService;

@code {

    [Parameter]
    public string strFromDate { get; set; }

    [Parameter]
    public string strToDate { get; set; }

    [Parameter]
    public int orderType { get; set; }

    [Parameter]
    public int filterId { get; set; }

    [Parameter]
    public string subModule { get; set; }

    [Parameter]
    public string reportFilterId { get; set; }

    ConnectionDB connectionDB;
    DTOOrderReportFilter reportFilter;

    protected override async Task OnInitializedAsync()
    {
        if(!string.IsNullOrEmpty(reportFilterId))
        {
            reportFilter = this.logisticsCoreService.GetReportFilter(this.reportFilterId);
        }
        else
        {
            reportFilter = new DTOOrderReportFilter();
            reportFilter.OrderType = this.orderType;
            reportFilter.FromDate = DateTime.ParseExact(strFromDate, "dd-MM-yyyy", null);
            reportFilter.ToDate = DateTime.ParseExact(strToDate, "dd-MM-yyyy", null);
            reportFilter.FilterId = this.filterId;
        }

        await this.initComponents();
    }

    private async Task initComponents()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            connectionDB = httpContextAccessor.HttpContext.Session.Get<ConnectionDB>("ConnectionDB");

            await GenerateRpt();
        }
    }

    async Task GenerateRpt()
    {
        if (string.IsNullOrEmpty(reportFilterId))
        {
            string guidfilter = Guid.NewGuid().ToString();
            reportFilter.GuidFilter = guidfilter;
        }
        this.reportFilter.SubModule = this.subModule;
        await logisticsService.AddOrderReportFilter(reportFilter);

        string RptOpt = orderType == 1 ? "Dispatchs" : "Returns";


        string paramurl = "RptTransportOrders.aspx?CuentaN=" + connectionDB.CuentaN + "&filterobj=" + reportFilter.GuidFilter + "&RptOpt=" + RptOpt;
        await JSRuntime.InvokeVoidAsync("$.fn.LoadReport", paramurl);

        StateHasChanged();
    }

    public async void Cancel()
    {
        if(string.IsNullOrEmpty(this.reportFilterId))
            navigationManager.NavigateTo(string.Format("ViewTransportOrders/{0}/{1}/{2}/{3}", strFromDate, strToDate, orderType, filterId));
        else
            navigationManager.NavigateTo(string.Format("ViewTransportOrders/{0}/{1}", this.subModule, this.reportFilterId));
    }
}

<div class="card" style="color:#102161;font-weight:bold;">
    <div class="card-header">
        <div class="row">
            <div class="col-8">
                @(this.subModule.Equals("Billing") ? "REPORTE DE FACTURACIÓN" : "REPORTE DE ORDENES DE TRANSPORTE") 
            </div>
            <div class="col-4 text-right">
                <button class="btn btn-light mr-3" @onclick="@(args => { Cancel(); })">Regresar</button>
            </div>
        </div>
    </div>
    <div class="card-body" style="padding: 0px">
        <div class="form-row">
            <iframe id="iframeReport" frameborder="0" style="height: calc(100vh - 80px); width: 100%; padding: 0px;"></iframe>
        </div>
    </div>
</div>

