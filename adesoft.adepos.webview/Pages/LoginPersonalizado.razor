@page "/loginpersonalizado"
@using Radzen
@using adesoft.adepos.webview.Data
@using adesoft.adepos.webview.Data.Model
@using  adesoft.adepos.Extensions
@using Microsoft.AspNetCore.Http
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject SecurityService securityService
@inject TokenAuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor httpContextAccessor
@*<AuthorizeView>
        <Authorized>
            <a href="Identity/Account/Manage">Hello, @context.User.Identity.Name!</a>
            <form method="post" action="Identity/Account/LogOut">
                <button type="submit" class="nav-link btn btn-link">Log out</button>
            </form>
        </Authorized>
        <NotAuthorized>
            <h1>Counter</h1>
            <button @onclick="LoginValidate">PULSAR</button>
            <a href="Identity/Account/Manage">Hello, @context.User.Identity.Name!</a>
        </NotAuthorized>
    </AuthorizeView>*@
@*  <input @bind-value="userapp.Password"   />*@

    <RadzenTemplateForm name="formlogin" id="formlogin" class="form-signin" TItem="UserApp" Data="@userapp" Submit="@OnSubmit">

        @if (loginFailure)
        {
            <p class="alert alert-danger">@messageLogin</p>
        }
        <img class="mb-4" src="Images/Unispan2.png" alt="" style="display:block;margin:auto;" width="285" height="100">
        <h1 class="h3 mb-3 font-weight-normal">Iniciar sesión</h1>



        @* <RadzenRequiredValidator Component="inputAccount" Text="Cuenta es requerido" Popup="false" />*@
        <RadzenTextBox class="form-control" AutoComplete="false" Placeholder="Usuario" Name="inputUsername" @bind-Value="userapp.Username" />
        <RadzenRequiredValidator Component="inputUsername" Text="Usuario es requerido" Popup="false" />
        <RadzenPassword class="form-control" @onkeydown="InputPasswordKeyDown" Placeholder="Password" Name="inputUserPassword" @bind-Value="userapp.Password" />
        <RadzenRequiredValidator Component="inputUserPassword" Text="Password requerido" Popup="false" />
        <RadzenButton class="btn btn-lg btn-success btn-block" ButtonType="ButtonType.Submit" Text="Ingresar"></RadzenButton>

        <p class="mt-5 mb-3 text-muted">&copy; Adesoft - 2020</p>

    </RadzenTemplateForm>


@code{
    UserApp userapp = new UserApp();

    private TookenResult tooken;
    List<ConnectionDB> listComp;
    List<Company> listsedes;


    public string messageLogin { get; set; }
    protected override async Task OnInitializedAsync()
    {
        listComp = SecurityService.GetConnections();
        //   await JSRuntime.InvokeVoidAsync("$.fn.SetFocus", "SubCompany");
        //userapp.CompaniaDB = "Foto Impacto";
        //userapp.Username = "admin";
        //userapp.Password = "test-password";
    }





    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // await JSRuntime.InvokeVoidAsync("SetAutoComplete", "myCompany", arrcompanys);

    }

    public void InputPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "13")
        {
            this.InvokeAsync(() => { JSRuntime.InvokeVoidAsync("$.fn.OnSubmitForm", "#formlogin"); });
        }
    }

    bool loginFailure;

    async void OnSubmit(UserApp model)
    {
        model.CompaniaDB = "UnisPanPro";
        userapp.Sede = "Principal";
        if (userapp.Username == null)
        {
            loginFailure = true;
            return;
            //Log("Submit", JsonSerializer.Serialize(model, new JsonSerializerOptions() { WriteIndented = true }));
        }
        if (string.IsNullOrEmpty(userapp.Sede))
        {
            loginFailure = true;
            return;
        }

        model.ConnectionDB = listComp.Where(x => x.Name.ToUpper() == model.CompaniaDB.ToUpper()).FirstOrDefault();
        if (model.ConnectionDB == null)
        {
            model.ConnectionDB = listComp.Where(x => x.CuentaN.ToUpper() == model.CompaniaDB.ToUpper()).FirstOrDefault();
        }
        if (model.ConnectionDB != null)
        {
            AdeposDBContext contex = new AdeposDBContext(userapp.ConnectionDB.Connection);
            Company company = contex.Companys.Where(x => x.Name.ToUpper() == model.Sede.ToUpper()).FirstOrDefault();
            if (company != null)
            {
                model.ConnectionDB.SedeId = company.CompanyId;
                model.ConnectionDB.MenuId = company.MenuId;
                tooken = await securityService.GetTooken(userapp.Password, userapp.Username, model.ConnectionDB);
                loginFailure = tooken.Tooken == null;
                if (loginFailure == true)
                {
                    messageLogin = "Tus credenciales no son validas. Por favor intente de nuevo.";
                }
            }
            else
            {
                messageLogin = "El nombre de la sede no esta registrado.";
                loginFailure = true;
            }
        }
        else
        {
            messageLogin = "La cuenta no existe.";
            loginFailure = true;
        }
        if (!loginFailure)
        {

            // await JSRuntime.InvokeAsync<object> ("localStorage.setItem", "connectionString", model.ConnectionDB.Connection);

            securityService.SetSessionConnection(model.ConnectionDB);
            //  await connectprovider.SetInstanceContext();

            await AuthStateProvider.SetTokenAsync(tooken.Tooken, tooken.Expiry);
            //this.InvokeAsync(() => { JSRuntime.InvokeVoidAsync("OnReload"); });
        }
    }
}
