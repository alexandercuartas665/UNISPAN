@page "/treepermission"
@using Microsoft.AspNetCore.Components.Rendering
@using adesoft.adepos.webview.Data.Model


<RadzenTree Change="@LogChange" Expand="@OnExpand" Data="@listactionsFather" Style="width: 100%; height: 590px">
    <RadzenTreeLevel Text="@GetTextForNode">
        <Template>
            <RadzenCheckBox @bind-Value="@((context.Value as ActionApp).HavePermission)"></RadzenCheckBox>
            &nbsp;
            <RadzenLabel Text="@((context.Value as ActionApp).Label)"></RadzenLabel>
        </Template>
    </RadzenTreeLevel>
</RadzenTree>

@code{
    [Parameter]
    public List<ActionApp> listactions { get; set; }

    public List<ActionApp> listactionsFather { get; set; }

    [Parameter]
    public EventCallback<TreeEventArgs> changeTree { get; set; }

    void LogChange(TreeEventArgs args)
    {

        //listactions.First().HavePermission = ((ActionApp)args.Value).HavePermission;
        changeTree.InvokeAsync(args);
    }


    string GetTextForNode(object data)
    {
        return ((ActionApp)data).Label;
    }


    protected override void OnInitialized()
    {
        listactionsFather = listactions.Where(x => x.IdFather == null).OrderBy(x => x.OrderNum).ToList();
    }


    void OnExpand(TreeExpandEventArgs args)
    {
        var actionap = args.Value as ActionApp;
        args.Children.Data = listactions.Where(x => x.IdFather == actionap.ActionAppId).OrderBy(x => x.OrderNum).ToList();
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = ((t) => (actionap.Type=="Multiple"));
        args.Children.Template = templatenode;

    }

    RenderFragment<RadzenTreeItem> templatenode = (context) => builder =>
    {
        var acti = context.Value as ActionApp;
        builder.OpenComponent<ExtRadzenTreeLevel>(0);
        builder.AddAttribute(1, "model",acti);
        builder.CloseComponent();
        builder.AddContent(2, " ");
        builder.AddContent(3, acti.Label);
    };
}

